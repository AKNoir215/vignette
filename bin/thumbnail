#!/bin/bash
# Wrapper for imagemagick that encapsulates our thumbnail logic.
# @author Damon Snyder (damon@huddler-inc.com) 

IMAGEMAGICK_BASE=${IMAGEMAGICK_BASE:-"/usr/local/"}
CONVERT=$IMAGEMAGICK_BASE/bin/convert
IDENTIFY=$IMAGEMAGICK_BASE/bin/identify


# If you are running on OS X, then install the gnu-getopt. The native getopt on OS X
# is not compatible with the options used on Centos which is where this was originally targeted.
# $ brew install gnu-getopt
# $ export GETOPT=/usr/local/opt/gnu-getopt/bin/getopt
GETOPT=${GETOPT:-"/usr/bin/getopt"}

# what memory, mapping, thread and time constraints do we want to put on the
# thumbnailing process? this will help to ensure that any given thumbnail
# doesn't overwhelm us.
# 
# imagemagick first tries to allocate the pixels in memory. if that fails or
# exceeds the limit, it next allocates to disks and memory maps the file. if
# that allocation exceeds the map limit, it then goes to disk. 
#
# If you are running on OS X, install ImageMagick with
# $ brew install imagemagick --with-webp --with-librsvg
# Then 
# $ export CONVERT_CONSTRAINTS=" "
# The options below result in a segfault on OS X.
CONVERT_CONSTRAINTS=${CONVERT_CONSTRAINTS:-" -limit memory 256MB -limit map 256MB -limit disk 256MB -limit thread 2 -limit time 60 "}

# dial down the quality level. this should save us some space without
# sacrificing too much image quality. in the tests that were done, this
# produced images that were closer in size to what is currently being created
# with phpthumb
JPEG_QUALITY_LEVEL=80

MODE_OPTIONS=(
	"fixed-aspect-ratio"
	"fixed-aspect-ratio-down"
	"thumbnail"
	"thumbnail-down"
	"top-crop"
	"top-crop-down"
	"zoom-crop"
	"zoom-crop-down"
)

function usage() {
cat <<EOF
    usage: $0
    --in|i      FILE   the image we are thumbnailing
    --out|o     FILE   output the thumbnail to this file
    --height|H  INT    the height
    --width|W   INT    the width

    --still            only use the first frame of the image
    --fill             pad or fill color for the image background. only used with --mode fixed-aspect-ratio
    --animated         treat this as an animated gif

    --fuzz      PERC   fuzz factor as percentage. give --fuzz 2% as an example
                        colors within this distance are considered equal.
                        currently only applied to animated gifs

    --mode      MODE   The thumbnail/render mode. Supported options: ${MODE_OPTIONS[*]}

    --help|h           print this

EOF
}

OS=$(uname)
SHORTOPTS="h"
LONGOPTS="in:,out:,width:,height:,fuzz:,help,fill:,still,mode:,animated"

ARGS=$($GETOPT -s bash --options $SHORTOPTS --longoptions $LONGOPTS -- "$@")

IN=''
OUT=''
HEIGHT=''
WIDTH=''
FILL="white"
ANIMATED=0
STILL=0
MODE='thumbnail-down'

THUMB_PARAMS=''
FUZZ=''

eval set -- "$ARGS" 

while true; do
	case $1 in
		-h|--help)
			usage
			exit 1
			;;
		--animated)
			ANIMATED=1
			;;
		--in)
			shift
			IN=$1
			;;
		--out)
			shift
			OUT=$1
			;;
		--height)
			shift
			HEIGHT=$1
			;;
		--width)
			shift
			WIDTH=$1
			;;
		--fuzz)
			shift
			FUZZ="-fuzz $1"
			;;
		--mode)
			shift
			MODE=$1
			;;
		--fill)
			shift
			FILL="'$1'" # see http://www.imagemagick.org/script/command-line-options.php#background for the supported parameters
			;;
		--still)
			STILL=1
			;;
		--)
			shift
			break
			;;
		*)
			shift
			break
			;;
	esac
	shift
done

if [ "$IN"X = "X" ]; then
	echo "-i|--in required"
	usage
	exit 1
fi

if [ "$OUT"X = "X" ]; then
	echo "-o|--out required"
	usage
	exit 1
fi

if [ "$HEIGHT"X = "X" ]; then
	echo "-H|--height required"
	usage
	exit 1
fi

if [ "$WIDTH"X = "X" ]; then
	echo "-W|--width required"
	usage
	exit 1
fi

valid_mode=0
for mode_option in "${MODE_OPTIONS[@]}"
do
	if [ "$mode_option" == "$MODE" ]; then
		valid_mode=1
	fi
done

if [ $valid_mode -ne 1 ]; then
	echo "Valid mode options are: ${MODE_OPTIONS[*]}"
	usage
	exit 1
fi


shopt -s nocasematch

function is_gif() {
	format=$($IDENTIFY -format "%m\n" "$1" | head -1)
	if [[ $format == "GIF" ]]; then
		return 1
	else
		return 0
	fi
}

function is_jpeg() {
	format=$($IDENTIFY -format "%m\n" "$1" | head -1)
	if [[ $format == "JPEG" ]]; then
		return 1
	else
		return 0
	fi
}

function thumb_params() {
	QUALITY=''

	if [ "$HEIGHT"X = "X" ]; then
			HEIGHT=${WIDTH}
	fi

	is_jpeg "$IN"
	jpeg=$?

	if [[ $jpeg -eq 1 ]]; then
			QUALITY="-quality ${JPEG_QUALITY_LEVEL}"
	fi

	# fixed-aspect-ratio (was LS, read fixed-aspect-ratio): thumbnail using a fixed aspect ratio and fill to generate a thumbnail with the exact dimensions given; no upscaling.
	# thumbnail-down (was LL): no upscaling, no padding -- default
	# thumbnail (was LM): allow output enlargement
	# zoom-crop (was ZC): zoom then crop; enlargement ok-- it blows up the image then crops to the exact dimensions
	# zoom-crop-down (was NS): like zoom crop, but will not scale up

	case $MODE in
		"fixed-aspect-ratio")
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT} -gravity center -background ${FILL} -extent ${WIDTH}x${HEIGHT}!"
			;;
		"fixed-aspect-ratio-down")
			# get height and width
			origheight=$($IDENTIFY -format "%h\n" "$IN" | head -1)
			origwidth=$($IDENTIFY -format "%w\n" "$IN" | head -1)

			if [[ $HEIGHT -gt $origheight && $WIDTH -gt $origwidth ]]; then # requested is bigger on both sides
				THUMB_PARAMS="${QUALITY} -gravity center -background ${FILL} -extent ${WIDTH}x${HEIGHT}!"
			else # original is bigger on at least side, so we can proceed just like --fixed-aspect-ratio
				THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT} -gravity center -background ${FILL} -extent ${WIDTH}x${HEIGHT}!"
			fi
			;;
		"thumbnail")
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}"
			;;
		"thumbnail-down")
			# the '>' means change as per WIDTHxHEIGHT but only if an image dimension exceeds a specified dimension.
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}>" 
			;;
		"top-crop")
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}^ -gravity north -extent ${WIDTH}x${HEIGHT}"
			;;
		"top-crop-down")
			# get height and width
			origheight=$($IDENTIFY -format "%h\n" "$IN" | head -1)
			origwidth=$($IDENTIFY -format "%w\n" "$IN" | head -1)
			echo "Height ${origheight} x Width ${origwidth}"
			if [[ $origheight -gt $HEIGHT && $origwidth -gt $WIDTH ]]; then
				THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}+0+0^ -gravity north -crop ${WIDTH}x${HEIGHT}+0+0!"
			elif [ $origheight -gt $HEIGHT ] || [ $origwidth -gt $WIDTH ]; then
				THUMB_PARAMS="${QUALITY} -gravity north -crop ${WIDTH}x${HEIGHT}+0+0! -thumbnail ${WIDTH}x${HEIGHT}+0+0"
			else
				THUMB_PARAMS="${QUALITY}"
			fi
			;;
		"zoom-crop")
			# the '^' means Minimum values of width and height given, aspect ratio
			# preserved. see http://www.imagemagick.org/script/command-line-processing.php#geometry
			THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}^ -gravity center -extent ${WIDTH}x${HEIGHT}"
			;;
		"zoom-crop-down")
			# get height and width
			origheight=$($IDENTIFY -format "%h\n" "$IN" | head -1)
			origwidth=$($IDENTIFY -format "%w\n" "$IN" | head -1)
			echo "Height ${origheight} x Width ${origwidth}"
			if [[ $origheight -gt $HEIGHT && $origwidth -gt $WIDTH ]]; then
				THUMB_PARAMS="${QUALITY} -thumbnail ${WIDTH}x${HEIGHT}+0+0^ -gravity center -crop ${WIDTH}x${HEIGHT}+0+0!"
			elif [ $origheight -gt $HEIGHT ] || [ $origwidth -gt $WIDTH ]; then
				THUMB_PARAMS="${QUALITY} -gravity center -crop ${WIDTH}x${HEIGHT}+0+0! -thumbnail ${WIDTH}x${HEIGHT}+0+0"
			else
				THUMB_PARAMS="${QUALITY}"
			fi
			;;
	esac
}

function animated_thumb_params() {
	thumb_params 
	params=$THUMB_PARAMS
	OUT=${OUT#*:}
	THUMB_PARAMS="-coalesce ${params} ${FUZZ} -layers Optimize"
}


function is_animated() {
	num=$($IDENTIFY -format "%n" "$1")
	if [[ $num -gt 1 ]]; then
		return 1
	else
		return 0
	fi
}

function thumb() {
	is_gif "$IN"
	gif=$?
	is_animated "$IN"
	animated=$?

	if [[ $gif -eq 1 && $animated -eq 1 ]]; then
		animated_thumb_params
	else
		thumb_params 
	fi

	if [[ $animated -eq 1 && $STILL -eq 1 ]]; then
		magick="${CONVERT} "${IN}[0]" ${CONVERT_CONSTRAINTS} "-auto-orient" ${THUMB_PARAMS} ${OUT}"
		echo ${magick}
		exec ${magick}
	else
		magick="${CONVERT} "${IN}" ${CONVERT_CONSTRAINTS} "-auto-orient" ${THUMB_PARAMS} "${OUT}""

		if eval ${magick}; then
			echo ${magick}
			exit 0
		elif [[ $animated -eq 1 ]]; then
			# on a failed thumb due to a (probably) corrupted animated gif, try thumbnailing the first frame
			magick="${CONVERT} "${IN}[0]" ${CONVERT_CONSTRAINTS} "-auto-orient" ${THUMB_PARAMS} ${OUT}"
			echo ${magick}
			exec ${magick}
		fi
	fi
}

thumb 
